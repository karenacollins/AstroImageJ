//  The purpose of this AstroImageJ (AIJ) macro is to produce a  plot of the relative, normalized
//  flux of a user-defined target, overlayed with a plot of the predicted depth profile
//
//  Comments or questions may be directed to the macro's author:
//  Dennis Conti, email: dennis@astrodennis.com
//
//  REVISION 1.2
var REVISION = "1.2";
//  Revision Notes:
//       1.2 Eliminated data outliers that are more than 5*RMS from the mean.
//           Normalize using the average values of only the OOT data.
//           Fix plot frame size to (900,600).
//       1.1 Add ability of user to specify the radius around the target of stars to be plotted
//       1.0 Initial Version
//
//                                     SET DEBUG MODE
//   0 = Logfile only contains status messages
//   1 = Debug values are used for all entries and Logfile contains detailed, intermittent information
//   2 = Same as 1, but Logfile also contains parsed strings
var debugMode = 0;
//  
//                                   DEFINE GLOBAL VARIABLES
//
// Define special characters as global variables
var TAB = "\t";
var COMMA = ",";
var CR=fromCharCode(13)
var LF=fromCharCode(10);
//
// Since functions only return a data value, globalValue is
// a global variable that can convey character strings from
// functions. Also define success  and useBJD as global values.
var globalValue="";
var success=false;
var useBJD = true;
//
//                                    DEFINE FUNCTIONS
//
//  This function will output a message to the logfile if the
//  debugLevel passed to it is greater than or equal to the
//  debugMode that is set for this macro run
//
function debugPrint (message,debugLevel) {
    n=d2s(debugLevel,0);
    if (debugLevel <= debugMode) {print (message);};
    return(true);
};

//
//  This function posts an error message in the log window,
//  closes and deletes the open outputFile, and then exits.
//
function errorHandling (message) {
    print(message);
    exit();
};

// This function validates that a string for a specified parameter
//  is less than or equal to a certain length.  If the length of the string
//  is valid, the function returns true; otherwise, the function produces
//  an error message and the macro is terminated.
//
function checkStringLength (parameter,string,length) {
    lenString=lengthOf(string);
    if (lenString<length+1) {
        return(true);
        } else {
        errorHandling ("**** ERROR: "+ parameter + " with a value of" + "'" + string + "'" + "is longer than allowed");
        }
};

// This function validates that a number for a specified parameter
//  is within a certain lower and upper range.  If the number
//  is valid, the function returns true; otherwise, the function produces
//  an error message and the macro is terminated.
//
function checkRange (parameter,number,lower,upper) {
    if ((number>lower||number==lower) && (number<upper||number==upper)) {
        return(true);
        } else {
       errorHandling ("**** ERROR: "+ parameter + " with a value of" + number + "is out of allowable range");
     };
};

//
//
//  This function returns the modulus of a number for a given divisor
//
function modulus (value,divisor) {
     success = value/divisor - floor(value/divisor);
     return(success);
};

//
//  This function finds the position of a substring in a string
//   where items in the string are separated by
//   a delimiter.  If flag is true, then there is a non-empty
//   first position. If the substring is not found, then
//   success is returned as false and position=0.
//
function findPositionInHeader (string,substr,delimiter,flag) {
//  Find the beginning character position of a substring
//  in a string
    indexOfSubString=indexOf(string,substr);
    lastDelim=1;
    stringLength=lengthOf(string);
//  Set initial position
    if (flag) {
        position=0;
         } else {
        position=1;
    }
//  Loop through all instances of the delimiter in the string
//  until the one immediately after the substring is found
    for (i = 1; i<stringLength; i++) {
         nextDelim=indexOf(string,delimiter,lastDelim);
         if (nextDelim+1==indexOfSubString) {
             position=i+1;
             success=true;
             return(position);
         };
         lastDelim=nextDelim+1;
     }
    success=false;
    return(0);
};

//
//  This function finds the value at a certain position in a string
//   where the values are separated by a delimiter. This function
//   can be used in conjuntion with the above findPosition function
//   to having found the correct position of the value being searched for.
//   The value is stored in the global variable globalValue. The function
//   returns false if this is the last value found in the string.
//
function findValue (string,position,Delimiter) {
    nextDelim=-1;
    for (i = 0; i<position; i++) {
         lastDelim=nextDelim+1; 
         nextDelim=indexOf(string,Delimiter,lastDelim);
//  Check if this is the last item in the string
         if (nextDelim==-1) {
              globalValue=substring(string,lastDelim,lengthOf(string));
              return(false);
         }
    }
   globalValue=substring(string,lastDelim,nextDelim);
   return(true);
};

//
//  This function gets the value in a row of the user's data,
//   which value is associated with a particular parameter
//   (i.e., substring) in a header row. The position of the
//   parameter in the header row is first found, then the the corresponding
//   value in that position in the data row is found and returned. If column
//   flag (colflag) is true, then there is a label in col. 1
//   of the header row, otherwise there is not. If the parameter
//   is not found in the header, then success is returned as false.
//
function getData (searchString,headerString,rowString,delimiter,colflag) {
    position=findPositionInHeader(headerString,searchString,delimiter,colflag);
//  if the parameter was not found, then success is false and this is
//  returned by this function also as false.
    if (success) {success=findValue(rowString,position,delimiter);};
    return(success);
};

//
//   This function displays a string of a certain length as a user dialogue.
//   If debugMode is non-zero, a default value is displayed.
//
function userString (string,default,length) {
     Dialog.addString(string,default,length);
};

//
//  This function gets a user string in globalValue from the dialogue, and
//  checks if it is empty and the error message is NOT empty. If the latter
//  conditions are true, then an error message is printed and
//  the macro is terminated. Otherwise, a message is printed to the
//  log and a check is made of the string's length.
//
function getUserString (errorMessage,printMessage,length) {
     globalValue = Dialog.getString();
     if (globalValue == "" && errorMessage !="") {
         errorHandling("*** ERROR: " + errorMessage)};
     message = printMessage + globalValue;
     successPrint = debugPrint (message,1);
     checkStringLength (printMessage,globalValue,length);
};

//
//  This function returns the current observation time
//
function getObsTime (header,rowString,inputFileDelimiter,firstMeasTableColFlag) {
     if (useBJD) {
        success = getData("BJD_TDB",header,rowString,inputFileDelimiter,firstMeasTableColFlag);
        } else {
               success = getData("JD_UTC",header,rowString,inputFileDelimiter,firstMeasTableColFlag);
               };
     observationTime = parseFloat(globalValue);
     return(observationTime);
};

//
// The following are the valid lengths of user entries.
//  These are later used to perform range checks.
lenMeasurementTable = 3000;
lenTargetStar = 4;
lenIngressTime = 6;
lenEgressTime = 6;
lenPredDepth = 6;
lenScale = 6;
lenRadius = 6;
lenRMSLimit = 3;
newlineChar = fromCharCode(10);
//
//
//--------------------------- First, get current date and time
//
getDateAndTime(year,month,dayOfWeek,dayOfMonth,hour,minute,second,msec);
//  Convert year, month, day, month, hour, and second to strings
yearString=d2s(year,0);
monthString=d2s(month+1,0);
// if month+1 is less than 10, append 0 as prefix - note month=0 is January
if (month+1<10) {
    monthString="0"+d2s(month+1,0);
    } else {
    monthString=d2s(month+1,0);
};
// if day is less than 10, append 0 as prefix
if (dayOfMonth<10) {
    dayString="0"+d2s(dayOfMonth,0);
    } else {
    dayString=d2s(dayOfMonth,0);
 };
hourString=d2s(hour,0);
minuteString=d2s(minute,0);
secondString=d2s(second,0);
datetime=yearString + "-" + monthString + "-" + dayString;
//
debugModeString = d2s(debugMode,0);
successPrint = debugPrint("Debug Mode="+ debugModeString,1);
//
//                               BEGIN USER DIALOGUES
//
//------------------------------ Create the first page of dialogues
//
Dialog.create("TFOP SG1 Target with Predicted Depth Overlay");

Dialog.addMessage("This macro creates a plot of the relative, normalized flux of a user-defined target with the profile of the predicted depth overlayed on it.");
Dialog.addMessage(" ");
//
//  Request name of target star that is in the measurement table header (e.g., T1)
string ="AIJ name of target star (e.g., T1)";
userString(string,"T1",lenTargetStar);
//
//  Request the predicted ingress time
string ="Predicted ingress time (decimal part only)";
userString(string,"",lenIngressTime);
//
//  Request the predicted egress time
string ="Predicted egress time (decimal part only)";
userString(string,"",lenEgressTime);
//
//  Request the predicted depth
string ="Predicted depth (ppt)";
userString(string,"",lenPredDepth);
//
//  Ask for plot radius
Dialog.addMessage("Enter the pixel scale, as well as the radius around the target for stars that are to be plotted:");
userString("           Pixel scale (arc-seconds/pixel) ","",lenScale);
userString("            Radius around target (arc-min.)","2",lenRadius);
//
//  Ask for multiple of rms to eliminate outliers
userString("Enter a value n to eliminate from being plotted outliers > n*rms from the mean","5",lenRMSLimit);
//
//  Ask if the user would like to enable log file diagnostics
message = "Select this box if you would like to turn on logfile diagnostics";
Dialog.addMessage("");
Dialog.addCheckbox(message,false);
//
//  Ask user to open measurement file
Dialog.addMessage("");
Dialog.addMessage("After clicking OK, you will be asked to select the measurement file from which the plot will be generated.");
//
Dialog.show();
//
//------------------------------ Get the target star and measurement table
//
//
//  Get AIJ name of target star
getUserString ("No name of target star entered","Target star: ",lenTargetStar);
TARGET = globalValue;
//   Initialize various variables used later that are based on TARGET name
targetXFITString = "X(FITS)_" + TARGET;
targetYFITString = "Y(FITS)_" + TARGET;
//
//  Get predicted ingress time
getUserString ("No ingress time entered","Ingress time: ",lenIngressTime);
INGRESS = globalValue;
ingressTime = parseFloat(INGRESS);
//
//  Get predicted egress time
getUserString ("No egress time entered","Egress time: ",lenEgressTime);
EGRESS = globalValue;
egressTime = parseFloat(EGRESS);
//  Check that ingressTime is less than egressTime
if (ingressTime >= egressTime) {errorHandling("****ERROR - ingress time is greater than or equal to egress time");};
//
//  Get predicted depth
getUserString ("No predicted depth entered","Pred. depth: ",lenPredDepth);
DEPTH = globalValue;
predDepth = parseFloat(DEPTH);
//
//  Get pixel scale and radius for plot, if plot is for select stars.
//  First get pixel scale
SCALE = Dialog.getString();
message = "**** ERROR: too many characters (>6) in pixel scale";
checkStringLength (message,SCALE,lenScale);
nScale = parseFloat(SCALE);
//  Next, get radius
RADIUS = Dialog.getString();
message = "**** ERROR: too many characters (>6) in radius";
checkStringLength (message,RADIUS,lenRadius);
nRadius = parseFloat(RADIUS);
// Check if a pixel scale was entered so was a radius, and vice versa
if (SCALE == "") {errorHandling ("**** ERROR: No pixel scale was entered");};
if (RADIUS == "") {errorHandling ("**** ERROR: No radius was entered");};
// Set flag indicating if a specific radius was entered
nRadius = parseFloat(RADIUS);
distanceLimit = nRadius*60 / nScale;
//
//  Get multiple of rms to eliminate outliers
getUserString ("No multiple of rms entered","RMS multiple: ",lenRMSLimit);
RMSLimit = globalValue;
rmsLimitValue = parseFloat(RMSLimit);
//
//  Get choice of debug mode and, if enabled, print out diagnostics accumualted so far
debugChoice = Dialog.getCheckbox();
if (debugChoice) {
   debugMode=1;
//  Clear the user's AIJ log window
   print("\\Clear");
   print("ingressTime= ",ingressTime," egressTime= ",egressTime);
};
//
// Set firstMeasTableColFlag to false indicating that the first column of the measurement
// table header does not contains a label
firstMeasTableColFlag = false;
successPrint = debugPrint("First measurement table col. flag: " + firstMeasTableColFlag,1);
//
//  Open the user-specified measurement file and then put the file into an array by rows
//
filepath = File.openDialog("Select AIJ Measurements Table");
measurementFile = File.openAsString(filepath);
measurementFileName = File.nameWithoutExtension;
//
//  Determine delimiter (tab or comma) used in the
//  input measurement table and set inputFileDelimiter
//  to this.
//
fullFileName = File.name;
indexOfperiod = lastIndexOf(fullFileName,".");
extension = substring(fullFileName,indexOfperiod+1);
message = "Extension= " + extension;
debugPrint(message,1);
if (extension == "tbl" || extension == "txt" || extension == "xls") {
    inputFileDelimiter = TAB;
    } else {
           if (extension == "csv") {
               inputFileDelimiter = COMMA;
               } else {errorHandling("*** ERROR: file extension is not .tbl, .txt, .xls, or .csv");};
           };
//  Split the measurement file into an array
fileArray=split(measurementFile,"\n");
nRows=lengthOf(fileArray);
//  Calculate number of observations
nObservations = nRows - 1;
//  Check if size of measurment table is less than 3,000 rows
if (nRows > lenMeasurementTable) {
     errorHandling("*** ERROR: Measurement table exceeds 3,000 rows")};
//  Get header row
header=fileArray[0];
//
//
//  If the first col. of the header does not contain a label,
//  then set iStart =2
if (firstMeasTableColFlag) {
     iStart = 1;} else {iStart = 2;};
//
//  Cycle through header parameters and store star IDs in xfitsList
//  if they have an X(FITS) value.
//  First initialize xfitsList array
//
xfitsList=newArray(300);
xfitsListIndex = 0;
success=true;
for (i=iStart; i<lengthOf(header)&&success;i++) {
     success=findValue(header,i,inputFileDelimiter);
     if (success) {
        successPrint = debugPrint(globalValue,1);
//  Check if found a target or comp XFITS() coordinate;
//  find X(FITS)_XXX headers - note, need to eliminate X(FITS) header
        if (substring(globalValue,0,2) == "X(" && lengthOf(globalValue) > 7) {
           if (substring(globalValue,0,5) == "X(FIT") {
              starID = substring(globalValue,8);
              successPrint = debugPrint("starID: " + starID,1);
              xfitsList[xfitsListIndex] = starID;
              xfitsListIndex = xfitsListIndex + 1;
            };
         };
     };
};
//
//  See what target and comp stars are within the required distance and then
//  store their column indices in array STARlist.
//
//  Get XFITS, YFITS values for the target star 
STARlistIndex = 0;
STARlist = newArray(300);
rowString = fileArray[1];
success=getData(targetXFITString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
if (!success) {errorHandling ("***ERROR: No X(FITS) value for target star");}; 
xfitsTARGET = parseFloat(globalValue);
success=getData(targetYFITString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
if (!success) {errorHandling ("***ERROR: No Y(FITS) value for target star");}; 
yfitsTARGET = parseFloat(globalValue);
successPrint = debugPrint ("xfitsTARGET=" + xfitsTARGET,1);
successPrint = debugPrint ("yfitsTARGET=" + yfitsTARGET,1);
//  Cycle through the stars in xfitsList to see which ones are within
//  the distanceLimit of the target star
for (j = 0; j<xfitsListIndex; j++) {
//  Get the X(FITS) and Y(FITS) location of star
     starID = xfitsList[j];
     successPrint = debugPrint("check: " + starID,1);
     starXFITSString = "X(FITS)_" + starID;
     starYFITSString = "Y(FITS)_" + starID;
     success=getData(starXFITSString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
     xfitSTAR = parseFloat(globalValue);
     success=getData(starYFITSString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
     yfitSTAR = parseFloat(globalValue);
     valdist = (xfitsTARGET-xfitSTAR)*(xfitsTARGET-xfitSTAR) + (yfitsTARGET-yfitSTAR)*(yfitsTARGET-yfitSTAR);
     distanceToTarget = sqrt(valdist);
     successPrint = debugPrint("xfitsTARGET=" + xfitsTARGET + "   xfitSTAR=" + xfitSTAR + "   yfitsTARGET=" + yfitsTARGET + "  yfitSTAR=" +yfitSTAR,1);
     successPrint = debugPrint("distanceToTarget = " + distanceToTarget,1);
//  If the star is within the prescribed distance from the target, include the star in the STARlist array
     if (distanceToTarget <= distanceLimit) {
         STARlist[STARlistIndex] = starID;
         successPrint = debugPrint("STARlist value= " + STARlist[STARlistIndex],1);
         STARlistIndex = STARlistIndex + 1;
         };
};
//
//  Create an array of the right side of all the observation times.
//  Store beginning and end times of the observation. 
obsTimes =newArray(nObservations);
prevObsTime =0;
prevObsTimeLeft = 0;
for (i=1; i<nObservations+1; i++) {
    rowString = fileArray[i];
//  Get time of observation
    obsTime = getObsTime(header,rowString,inputFileDelimiter,firstMeasTableColFlag);
//  If this is first observation, store the beginning time
    if (i==1) {
       beginTimeLeft = floor(obsTime);
       beginTimeRight = obsTime - beginTimeLeft;
       message = "Begin time left: " + d2s(beginTimeLeft,12) + "  Begin time right: " + d2s(beginTimeRight,12);
       success = debugPrint(message,1);
       };
//  If this is last observation, store the beginning time
    if (i==nObservations) {
       endTimeLeft = floor(obsTime);
       endTimeRight = obsTime - endTimeLeft;
//  If the end time has rolled over to the next day, add 1.0 to the right part of the endTime
       if (endTimeLeft == beginTimeLeft + 1) {endTimeRight = endTimeRight + 1.0;};
       message = "End time left: " + d2s(endTimeLeft,12) + "  End time right: " + d2s(endTimeRight,12);
       success = debugPrint(message,1);
       };
//  Check that observation times are in increasing order
    if (obsTime < prevObsTime) {
       errorHandling("****ERROR: Observation times are not in increasing order");
       } else {
              prevObsTime = obsTime;
              };
//  Get left and right side of decimal point for the current observation time
     obsTimeLeft = floor(obsTime);
     obsTimeRight = obsTime - obsTimeLeft;
//  Add 1.0 if day had rolled over
     if (obsTimeLeft == prevObsTimeLeft + 1) {obsTimeRight = obsTimeRight +1;};
//  Store right side in array
     obsTimes[i-1] = obsTimeRight;
     success = debugPrint("Observation time= " + d2s(obsTimeRight,6),1);
     prevObsTimeLeft = obsTimeLeft;
};
//
//
overlapCase = true;
//  If the observation is entirely within the predicted transit duration
//  and therefore there is no OOT observation data, set overlapCase to false
if ( (beginTimeRight<ingressTime && endTimeRight<ingressTime) || (beginTimeRight>egressTime && endTimeRight>egressTime)
  || (beginTimeRight>ingressTime && endTimeRight<egressTime) )
     {overlapCase = false;};
success = debugPrint("overlapCase= " + overlapCase,1);
//
//  Compute the weighted average for rel_flux of the each star in the STARlist for later use in computing its
//  relative, normalized flux. Include only OOT data in computing the average, unless the observation
//  is completely outside or completely inside the predicted transit in which case all data is used
STARnormfluxavg = newArray(300);
successPrint = debugPrint(" ",1);
successPrint = debugPrint("*****************  Computation of running average rel_flux ****************",1);
for (k=0; k<STARlistIndex; k++) {
    numeratorSum = 0.0;
    denominatorSum = 0.0;
//  Cycle through all observations and, for those to be included, calculate the
//  the running sum of invVar = 1/relfluxerr^2, where relfluxerr = the rel_flux error for the star for the
//  observation, as well as the running sum of the rel_flux * invVar. The weighted, normalized average
//  is then the latter divided by the former
    for (i=1;i<nObservations+1;i++) {
        rowString = fileArray[i];
//  If observation is OOT, include it in running average. However, if the observation
//  is completely within the predicted transit, include it as well
        obsTime = obsTimes[i-1];
        if (obsTime<ingressTime || obsTime>egressTime || !overlapCase) {
           obsTimeString = d2s(obsTime,15);
           successPrint = debugPrint("Observation time: " + obsTimeString,1);
//  Get star's rel_flux
           RelFluxString = "rel_flux_" + STARlist[k];
           success=getData(RelFluxString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
           relflux = parseFloat(globalValue);
           message = "Row " + i + ": " + RelFluxString + "=" +  globalValue;
//  Get star's rel_flux_err
           RelFluxErrString = "rel_flux_err_" + STARlist[k];
           success=getData(RelFluxErrString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
           relfluxerr = parseFloat(globalValue);
           message = message + "  " + RelFluxErrString + "=" +  globalValue;
           successPrint = debugPrint(message,1);
//  Compute a running sum of invVar and rel_flux * invVar
           invVar = 1/(relfluxerr*relfluxerr);
           denominatorSum = denominatorSum + invVar;
           numeratorSum = numeratorSum + relflux * invVar;
           message = "invVar= " + invVar + " denominatorSum=" + denominatorSum + " numeratorSum=" + numeratorSum;
           succesPrint = debugPrint(message,1);
           };
    };
//  Compute the weighted average for each star
    STARnormfluxavg[k] = numeratorSum / denominatorSum;
    message = "Normalized avg for " + STARlist[k] + "=" + STARnormfluxavg[k];
    successPrint = debugPrint(message,1);
    successPrint = debugPrint(" ",1);
};
//
//  For each star in STARlist, cycle through each row in the measurement table
//  and compute its relative, normalized flux. Also, compute a running averate
//  for later use in computing the RMS. Since the macros don't support two-
//  dimensional arrays, store in normalizedFlux the values for the observations
//  for all stars. The beginning of each list for star with index k is indexed
//  into normalizedFlux by k*nObservations. STARlistIndex = number of stars in
//  STARlist. When done, nValues will equal the number of normalized flux values.
//
normalizedFlux = newArray(nObservations*STARlistIndex);
avgNormFlux = newArray(STARlistIndex);
nValues = 0;
for (k=0; k<STARlistIndex; k++) {
    runningAverage = 0.0;
    for (i=1; i<nObservations+1; i++) {
        successPrint = debugPrint(" ",1);
        iString = d2s(i,0);
        successPrint = debugPrint("For Row " + iString + ":",1);
//  Get this row of the measurement table
        rowString = fileArray[i];
//  Get the rel_flux of the star
        RelFluxString = "rel_flux_" + STARlist[k];
        success=getData(RelFluxString,header,rowString,inputFileDelimiter,firstMeasTableColFlag);
        relflux = parseFloat(globalValue);
        relfluxString = d2s(relflux,6);
        successPrint = debugPrint("relflux for: " + STARlist[k] + "=" + relfluxString,1);
//  Compute normalized flux
        normalizedFlux[nValues] = relflux/STARnormfluxavg[k];
//  Compute running average
        runningAverage = runningAverage + normalizedFlux[nValues]/nObservations;
        message = "Normalized flux= " + d2s(normalizedFlux[nValues],6) + " running average= " + d2s(runningAverage,6);
        successPrint = debugPrint(message,1);
        nValues = nValues + 1;
    };
    avgNormFlux[k] = runningAverage;
};
//
//  Compute the RMS for each star
rmsSTAR = newArray(STARlistIndex);
for (k=0; k<STARlistIndex; k++) {
    iBegin = k*nObservations;
    iEnd = (k+1)*nObservations;
    varSum = 0.0;
    success = debugPrint("rms computation for star:" + STARlist[k],1);
    for (i=iBegin; i<iEnd; i++) {
      variance = (avgNormFlux[k]-normalizedFlux[i]) * (avgNormFlux[k]-normalizedFlux[i]);
      varSum = varSum + variance;
         };
    rmsSTAR[k] = sqrt(varSum/nObservations);
    message = " rms: " + rmsSTAR[k];
    success = debugPrint (message,1);
};
//
//   Include in a final array the normalized flux values for
//   each star that are < 5 * rms of that star; also, keep a count
//   for each star of how many good observations there were
//
countSTAR = newArray(STARlistIndex);
Array.fill(countSTAR,0.0);
for (k=0; k<STARlistIndex; k++) {
    iBegin = k*nObservations;
    iEnd = (k+1)*nObservations;
    nCount = 0;
    for (i=iBegin; i<iEnd; i++) {
//  Exclude the normalized flux for future plotting if it is greater than
//  rmsLimitValue times the rms for this star; otherwise just increment count for number of
//  included observations for this star
        if (abs(1-normalizedFlux[i]) > rmsLimitValue * rmsSTAR[k]) {
             normalizedFlux[i] = 99999;
             message = "Exclude normalized flux of observation " + d2s(i-iBegin+1,0) + " for star " + STARlist[k];
             success = debugPrint(message,1);
             } else {countSTAR[k] = countSTAR[k] + 1;};
    };
};
//
//  Start overlay 1 hour before ingress time and continue to 1 hour after egress time
overlayStartTime = ingressTime - 1/24;
overlayEndTime = egressTime + 1/24;
//  Set timeMIN to earlier of overlayStartTime or beginTimeRight
if (overlayStartTime < beginTimeRight) {timeMIN = overlayStartTime;} else {timeMIN = beginTimeRight;};
//  Set timeMAX to later of overlayEndtime or endTimeRight
if (overlayEndTime > endTimeRight) {timeMAX = overlayEndTime;} else {timeMAX = endTimeRight;};
//
//
//
//************************** Begin plot process
//  Create the Plot (X=time,Y=normalized relative flux)
//  For each star in STARlist, put into xValues and yValues the normalizedTime and
//  normalizedFlux values and then plot. For
//  the X axis, reuse the normalizedTime array for all stars
//
//  First, create an array of colors to be used by each star in a round-robin fashion
plotColor = newArray(11);
plotColor[0] = "black";
plotColor[1] = "blue";
plotColor[2] = "cyan";
plotColor[3] = "darkGray";
plotColor[4] = "Gray";
plotColor[5] = "green";
plotColor[6] = "lightGray";
plotColor[7] = "magenta";
plotColor[8] = "orange";
plotColor[9] = "pink";
plotColor[10] = "yellow";
//  Start off with first color
colorIndex = 0;
//
// Cycle through each star to plot it's data and the transit curve
//
transitDepth = 1 - predDepth/1000;
for (k=STARlistIndex-1;k>=0; k--) {
// Load time and flux values for the k'th star into X and Y values
// and keep track of min and max flux
    iBegin = k*nObservations;
    iEnd = (k+1)*nObservations;
    jIndex = 0;
    fluxMIN = 2.0;
    fluxMAX = 0;
//  Create arrays for X and Y values to be plotted; use the values in countSTAR for their size
    arraySize = countSTAR[k];
    xValues = newArray(arraySize);
    yValues = newArray(arraySize);
    for (i=iBegin;i<iEnd;i++) {
//  Include the normalized flux value if it was previously determined to
//  be within RMS criteria, as well as the corresponding observation time
        if (normalizedFlux[i] != 99999) {
           xValues[jIndex] = obsTimes[i-iBegin];
           message = "xValue calculated for: " + d2s(xValues[jIndex],6) + " observation time";
           success = debugPrint(message,1);
           yValues[jIndex] = normalizedFlux[i];
           jIndex = jIndex + 1;
           if (normalizedFlux[i] <= fluxMIN) {fluxMIN = normalizedFlux[i];};
           if (normalizedFlux[i] >  fluxMAX) {fluxMAX = normalizedFlux[i];};
           };
        
    };
    message = "timeMIN= " + timeMIN + " timeMAX= " + timeMAX + " fluxMIN= " + fluxMIN + " fluxMAX= " + fluxMAX;
    successPrint = debugPrint(message,1);
// Adjust min and max X values with 1% of X-range for better readability of the plot
    xMAX = timeMAX + 0.01*(timeMAX-timeMIN);
    xMIN = timeMIN - 0.01*(timeMAX-timeMIN);
// Use as maximum Y additional 10% of fluxMAX beyond 1.0; and use as minimum Y
// 10% of the minimum of (flux minimum or 1-transit depth) below 1.0
    yMAX = fluxMAX+ (fluxMAX-1)*0.1;
    if (fluxMIN < transitDepth) {
        yMIN = fluxMIN -(1-fluxMIN)*0.1;
        } else { yMIN = transitDepth - (1-transitDepth)*0.1;};
// Create the the correct legends
    if (useBJD) {timeName = "BJD_TDB";} else {timeName = "JD_UTC";};
    Plot.create("Overlay of Predicted Transit",timeName + " - " + d2s(beginTimeLeft,0),"relative normalized flux");
    Plot.setFrameSize(900,600);
    Plot.setLimits(xMIN,xMAX,yMIN,yMAX);
//  Put file name at a position 0% from the upper left corner
    Plot.addText(fullFileName,0.0,-0.02);
//  Put star name at a position 50% from the upper left corner
    Plot.addText("Star: " + STARlist[k],0.5,-0.02);
//  Put rms of star at a position 60% from the upper left corner
    Plot.addText("RMS: " + d2s(rmsSTAR[k],6),0.6,-0.02);
//
//  Plot overlay of predicted depth
    Plot.setLineWidth(2);
    Plot.setColor("red");
//  Draw pre-ingess line
    Plot.drawLine(overlayStartTime,1.0,ingressTime,1.0);
//  Draw in-transit curve
    Plot.drawLine(ingressTime,1.0,ingressTime,transitDepth);
    Plot.drawLine(ingressTime,transitDepth,egressTime,transitDepth);
    Plot.drawLine(egressTime,transitDepth,egressTime,1.0);
//  Draw post-egress line
    Plot.drawLine(egressTime,1.0,overlayEndTime,1.0);
//
//  Draw pred. ingress and egress lines
    Plot.setLineWidth(1);
    Plot.setColor("blue");
    Plot.drawLine(ingressTime,fluxMIN,ingressTime,fluxMAX);
    Plot.drawLine(egressTime,fluxMIN,egressTime,fluxMAX);
    ingressTextX = (ingressTime-xMIN)/(xMAX-xMIN)-0.02;
    ingressTextY = (yMAX-fluxMIN)/(yMAX-yMIN)+0.03;
    Plot.addText(" Pred.",ingressTextX,ingressTextY);
    Plot.addText("Ingress",ingressTextX,ingressTextY+0.02);
    egressTextX = (egressTime-xMIN)/(xMAX-xMIN)-0.02;
    egressTextY = ingressTextY;
    Plot.addText(" Pred.",egressTextX,egressTextY);
    Plot.addText("Egress",egressTextX,egressTextY+0.02);
//
// Choose next color in the list for the data points
    Plot.setColor(plotColor[colorIndex]);
// ***For now, don't cycle through colors for points
// Reset colorIndex if have reached end of list
//    if (colorIndex == 10) {colorIndex = 0;};
//  colorIndex = colorIndex + 1;
//  Plot the data points and then wait for user
    Plot.add("circles",xValues,yValues);
    Plot.show();
};

exit();